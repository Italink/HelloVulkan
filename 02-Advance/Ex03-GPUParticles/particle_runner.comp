#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_SIZE 32
#define PARTICLE_MAX_SIZE 100000

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1 ) in;

struct Particle{
    vec3 position;
    float life;
    vec3 velocity;
};

layout(std140, binding = 0)  buffer InputParticle{
    int inputCounter;
    Particle intputParticles[PARTICLE_MAX_SIZE];
};

layout(std140, binding = 1) buffer OutputParticle{
    int outputCounter;
    Particle outputParticles[PARTICLE_MAX_SIZE];
};

#define DEAD_TIME 5 

void main() {

    const uint srcIndex = gl_GlobalInvocationID.x * gl_NumWorkGroups.y * LOCAL_SIZE + gl_GlobalInvocationID.y;      //根据工作单元的位置换算出内存上的索引

    if( srcIndex >= inputCounter||intputParticles[srcIndex].life > DEAD_TIME) // 
        return;
    const uint dstIndex = atomicAdd(outputCounter,1);                           //顶点计数

    outputParticles[dstIndex].life = intputParticles[srcIndex].life + 0.01;     //填充到新的顶点索引

    outputParticles[dstIndex].position = intputParticles[srcIndex].position + intputParticles[srcIndex].velocity ;

    outputParticles[dstIndex].velocity = intputParticles[srcIndex].velocity + vec3(0,0.00003,0) ;

}